# frozen_string_literal: true

require "rails_helper"

RSpec.describe MalwareScan do
  describe "#call" do
    let(:upload) { create(:upload) }
    let(:blob_client) { instance_double(AzureBlob::Client) }
    let(:scan_result) { "no threats found" }
    let(:tags) { { "Malware Scanning scan result" => scan_result } }

    subject(:call_malware_scan) { described_class.call(upload:) }

    before do
      allow(AzureBlob::Client).to receive(:new).and_return(blob_client)
      allow(blob_client).to receive(:get_blob_tags).and_return(tags)
    end

    it "calls the Azure Storage REST API for the scan result" do
      expect(blob_client).to receive(:get_blob_tags).with(upload.file.key)
      call_malware_scan
    end

    context "when the upload file is blank" do
      before { allow(upload).to receive(:file).and_return(nil) }

      it "does not perform a scan" do
        expect(blob_client).not_to receive(:get_blob_tags)
        call_malware_scan
      end
    end

    context "when the upload already has a clean scan result" do
      before { upload.scan_result_clean! }

      it "does not perform a scan" do
        expect(blob_client).not_to receive(:get_blob_tags)
        call_malware_scan
      end
    end

    context "with a clean scan result" do
      it "saves the result as clean" do
        call_malware_scan
        expect(upload.malware_scan_result).to eq("clean")
      end
    end

    context "with a suspect scan result" do
      let(:scan_result) { "Malicious" }

      it "saves the result as suspect" do
        call_malware_scan
        expect(upload.malware_scan_result).to eq("suspect")
      end
    end

    context "with an error scan result" do
      let(:scan_result) { "scan failed" }

      it "saves the result as error" do
        call_malware_scan
        expect(upload.malware_scan_result).to eq("error")
      end
    end

    context "when an AzureBlob::Http::Error occurs" do
      before do
        allow(blob_client).to receive(:get_blob_tags).and_raise(AzureBlob::Http::Error)
      end

      it "saves an error result and re-raises the error" do
        expect { call_malware_scan }.to raise_error(AzureBlob::Http::Error)
        expect(upload.malware_scan_result).to eq("error")
      end
    end
  end
end
