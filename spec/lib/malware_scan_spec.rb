# frozen_string_literal: true

require "rails_helper"

RSpec.describe MalwareScan do
  describe "#call" do
    let(:upload) { create(:upload) }
    let(:tags_url) { "https://example.com/tempdata/xyz123?comp=tags" }
    let(:response_success) { true }
    let(:scan_result) { "No threats found" }
    let(:response_body) { <<-XML.squish }
      <Tags>
        <Tag>
          <Key>Malware Scanning scan result</Key>
          <Value>#{scan_result}</Value>
        </Tag>
      </Tags>
    XML

    let(:stubbed_blob_client) do
      instance_double(AzureBlob::Client, generate_uri: tags_url)
    end

    let(:stubbed_response) do
      instance_double(
        Net::HTTPResponse,
        body: response_body,
        is_a?: response_success,
      )
    end

    subject(:malware_scan) { described_class.call(upload:) }

    before do
      allow(AzureBlob::Client).to receive(:new).and_return(
        stubbed_blob_client,
      )
      allow(stubbed_blob_client).to receive(:get_blob).and_return(stubbed_response)
    end

    it "calls the Azure Storage REST API for the scan result" do
      expect(stubbed_blob_client).to receive(:get_blob).with(upload.file.key)
      malware_scan
    end

    context "with a successful scan result" do
      it "saves the result" do
        malware_scan
        expect(upload.malware_scan_result).to eq("clean")
      end
    end

    context "with a failed scan result" do
      let(:scan_result) { "Malicious" }

      it "delete the upload" do
        malware_scan
        expect(Upload.find_by_id(upload.id)).to be_nil
      end
    end

    context "with an unsuccessful response" do
      let(:response_success) { false }

      it "saves an error result" do
        malware_scan
        expect(upload.malware_scan_result).to eq("error")
      end
    end
  end
end
