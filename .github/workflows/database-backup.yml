name: Backup Database to Azure Storage
concurrency: build_and_deploy_main

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to backup. No sanitised backup or restore will occur.
        required: true
        default: qa
        type: choice
        options:
          - qa
          - staging
          - sandbox
          - production
          - productiondata
      backup-file:
        description: |
          Backup file name (without extension). Default is rtt_[env]_adhoc_YYYY-MM-DD. Set it explicitly when backing up a point-in-time (PTR) server. (Optional)
        required: false
        type: string
        default: default
      db-server:
        description: |
          Name of the database server. Default is the live server. When backing up a point-in-time (PTR) server, use the full name of the PTR server. (Optional)
  schedule: # 03:15 UTC
    - cron: '15 3 * * *'

permissions:
  id-token: write

env:
  SERVICE_NAME: register
  SERVICE_SHORT: rtt
  TF_VARS_PATH: terraform/aks/workspace-variables

jobs:
  restore_staging:
    name: Restore database (staging)
    runs-on: ubuntu-latest
    environment:
      name: staging

    steps:
    - uses: actions/checkout@v5
      name: Checkout

    - name: Set env variable
      run: echo "SANITISED_FILE_NAME=register_sanitised_$(date +"%F")" >> $GITHUB_ENV

    - name: Download Backup
      run: |
        az storage blob download --container-name database-backup \
        --file ${SANITISED_FILE_NAME}.sql.gz --name ${SANITISED_FILE_NAME}.sql.gz \
        --connection-string '${{ secrets.AZURE_STORAGE_CONNECTION_STRING_SANITISED }}'

    - uses: azure/login@v2
      with:
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        client-id: ${{ secrets.AZURE_CLIENT_ID }}

    - name: Install kubectl
      uses: DFE-Digital/github-actions/set-kubectl@master

    - uses: DFE-Digital/github-actions/set-kubelogin-environment@master
      with:
        azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}

    - name: K8 setup
      shell: bash
      run: |
        make ci staging get-cluster-credentials
        make install-konduit

    - name: Restore backup to staging database
      shell: bash
      run: |
        bin/konduit.sh -n bat-staging -i ${SANITISED_FILE_NAME}.sql.gz -c -t 7200 register-staging -- psql

    - name: Check for Failure
      uses: ./.github/actions/send-slack-notification/
      if: ${{ failure() }}
      with:
        slack-title: Staging Restore Failure
        slack-message: ':alert: Daily restore failure for staging :sadparrot:'
        slack-webhook: ${{ secrets.SLACK_WEBHOOK }}
