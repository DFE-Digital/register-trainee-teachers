name: 'Deploy to PaaS'

on:
  workflow_dispatch:
    inputs:
      qa:
        description: Deploy to qa?
        default: 'true'
        required: true
      staging:
        description: Deploy to staging?
        default: 'false'
        required: true
      production:
        description: Deploy to production?
        default: 'false'
        required: true
      sandbox:
        description: Deploy to sandbox?
        default: 'false'
        required: true
      dttpimport:
        description: Deploy to dttpimport?
        default: 'false'
        required: true
      pr:
        description: PR number for the review app
        required: false
      sha:
        description: Commit sha to be deployed
        required: true

jobs:
  prepare-matrix:
    name: Prepare Environment Matrix
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.select-environments.outputs.environments || steps.set-pr-environment.outputs.environments }}
    steps:
      - id:   select-environments
        if:  github.event.inputs.pr == ''
        uses: DFE-Digital/bat-infrastructure/actions/prepare-environment-matrix@main
        with:
          available-environments: qa,staging,production,sandbox,research,dttpimport

      - id:  set-pr-environment
        if:  github.event.inputs.pr != ''
        run: echo "::set-output name=environments::$PR"
        env:
          PR: '{"environment": ["${{ github.event.inputs.pr }}"]}'

      - uses: DFE-Digital/github-actions/turnstyle@master
        name: Wait for other inprogress deployment runs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          initial-wait-seconds: 12
          poll-interval-seconds: 20
          abort-after-seconds: 1800
          same-branch-only: true

  deploy:
    name: ${{ matrix.environment }} Deployment
    runs-on: ubuntu-latest
    needs: [prepare-matrix]
    strategy:
       matrix: ${{ fromJson(needs.prepare-matrix.outputs.environments) }}
       max-parallel: 1
    steps:
      - uses: actions/checkout@v2

      - name: Set Current Deployment Environment variable
        run: |
          echo "DOCKER_IMAGE=$DOCKER_IMAGE" >> $GITHUB_ENV

          if [ -n "${{ github.event.inputs.pr }}" ]; then
            PR_NUMBER=${{ github.event.inputs.pr }}
            echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
            echo "APP_NAME=$PR_NUMBER" >> $GITHUB_ENV
            echo "DEPLOY_URL=https://register-pr-$PR_NUMBER.london.cloudapps.digital" >> $GITHUB_ENV
            DEPLOY_ENV=review
          else
            DEPLOY_ENV=$MATRIX_ENV
          fi

          echo "DEPLOY_ENV=${DEPLOY_ENV}" >> $GITHUB_ENV

          tf_vars_file=terraform/workspace-variables/${DEPLOY_ENV}.tfvars.json
          echo "key_vault_name=$(jq -r '.key_vault_name' ${tf_vars_file})" >> $GITHUB_ENV
          echo "key_vault_app_secret_name=$(jq -r '.key_vault_app_secret_name' ${tf_vars_file})" >> $GITHUB_ENV
          echo "key_vault_infra_secret_name=$(jq -r '.key_vault_infra_secret_name' ${tf_vars_file})" >> $GITHUB_ENV
          echo "paas_space_name=$(jq -r '.paas_space_name' ${tf_vars_file})" >> $GITHUB_ENV
        env:
          MATRIX_ENV: ${{ matrix.environment }}

      - name: Start ${{ matrix.environment }} Deployment
        uses: bobheadxi/deployments@v0.4.2
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ matrix.environment }}

      - uses: azure/login@v1
        with:
          creds: ${{ secrets[format('AZURE_CREDENTIALS_{0}', env.DEPLOY_ENV)] }}

      - name: Validate Key Vault Secrets
        uses: DFE-Digital/github-actions/validate-key-vault-secrets@master
        with:
         KEY_VAULT: ${{ env.key_vault_name }}
         SECRETS: |
          ${{ env.key_vault_app_secret_name }}
          ${{ env.key_vault_infra_secret_name }}

      - name: Pin Terraform version
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: 0.13.5

      - name: Terraform init, Terraform Plan and Apply
        run: make ${{ env.DEPLOY_ENV }} ci deploy
        env:
          ARM_ACCESS_KEY:           ${{ secrets[format('ARM_ACCESS_KEY_{0}', env.DEPLOY_ENV)] }}
          TF_VAR_azure_credentials: ${{ secrets[format('AZURE_CREDENTIALS_{0}', env.DEPLOY_ENV)] }}
          IMAGE_TAG:                ${{ github.event.inputs.sha }}
          CONFIRM_PRODUCTION:       yes

      - uses: DFE-Digital/github-actions/keyvault-yaml-secret@master
        if: env.DEPLOY_ENV == 'staging' || env.DEPLOY_ENV == 'production'
        id: cf-username-secret
        with:
          keyvault: ${{ env.key_vault_name }}
          yaml_secret: ${{ env.key_vault_infra_secret_name }}
          secret: CF_USER

      - uses: DFE-Digital/github-actions/keyvault-yaml-secret@master
        if: env.DEPLOY_ENV == 'staging' || env.DEPLOY_ENV == 'production'
        id: cf-password-secret
        with:
          keyvault: ${{ env.key_vault_name }}
          yaml_secret: ${{ env.key_vault_infra_secret_name }}
          secret: CF_PASSWORD

      - name: Setup cf cli
        if: env.DEPLOY_ENV == 'staging' || env.DEPLOY_ENV == 'production'
        uses: DFE-Digital/github-actions/setup-cf-cli@master
        with:
          CF_USERNAME:   ${{ steps.cf-username-secret.outputs.secret-value }}
          CF_PASSWORD:   ${{ steps.cf-password-secret.outputs.secret-value }}
          CF_SPACE_NAME: ${{ env.paas_space_name }}

      - name: Run data migrations
        if: env.DEPLOY_ENV == 'staging' || env.DEPLOY_ENV == 'production'
        run: cf run-task "register-${DEPLOY_ENV}" --command "cd /app && bundle exec rails data:migrate" --wait

      - name: Trigger ${{ env.DEPLOY_ENV }} Smoke Tests
        uses: benc-uk/workflow-dispatch@v1.1
        with:
          workflow: Smoke Tests
          token:    ${{ secrets.API_TOKEN_FOR_GITHUB_ACTION }}
          inputs:   '{"environment": "${{ env.DEPLOY_ENV }}", "pr": "${{ env.PR_NUMBER }}"}'

      - name: Wait for smoke tests
        id: wait_for_smoke_tests
        uses: fountainhead/action-wait-for-check@v1.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref:   ${{ github.ref }}
          checkName: smoke-tests-${{ env.DEPLOY_ENV }}
          timeoutSeconds:  300
          intervalSeconds: 15

      - name: Stop when smoke tests fail
        if: steps.wait_for_smoke_tests.outputs.conclusion == 'failure'
        run: exit 1

      - name: Update ${{ matrix.environment }} status
        if: ${{ always() }}
        uses: bobheadxi/deployments@v0.4.2
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ matrix.environment }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: ${{ env.DEPLOY_URL }}

      - name: Check for Failure
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_CHANNEL: twd_publish_register_tech
          SLACK_COLOR: '#ef5343'
          SLACK_ICON_EMOJI: ':github-logo:'
          SLACK_USERNAME: Register Trainee Teachers
          SLACK_TITLE: Build Failure
          SLACK_MESSAGE: ':alert: Build failure on ${{ matrix.environment }} :sadparrot:'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
