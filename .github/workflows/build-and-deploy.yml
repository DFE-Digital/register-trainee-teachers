name: Build and Deploy

on:
  push:
   branches:
    - main
  pull_request:
    branches:
    - main
    types: [opened, reopened, synchronize, labeled]

permissions:
  contents: write
  deployments: write
  packages: write
  pull-requests: write

jobs:
  build:
    name: Build
    env:
      DOCKER_IMAGE: ghcr.io/dfe-digital/register-trainee-teachers
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_HOSTNAME: localhost
    outputs: 
      docker_image: ${{ env.DOCKER_IMAGE }}
      image_tag: ${{ env.IMAGE_TAG }}
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      name: Checkout

    - name: Set environment variables (push)
      if: github.event_name == 'push'
      run: |
        GIT_BRANCH=${GITHUB_REF##*/}
        echo "BRANCH_TAG=$GIT_BRANCH" >> $GITHUB_ENV # GIT_BRANCH will be main for refs/heads/main
        echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

    - name: Set environment variables (pull_request)
      if: github.event_name == 'pull_request'
      run: |
        GIT_BRANCH=${GITHUB_HEAD_REF##*/}
        echo "BRANCH_TAG=$GIT_BRANCH" >> $GITHUB_ENV
        echo "IMAGE_TAG=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV

    - name: Login to GitHub Container Registry
      if: github.actor != 'dependabot[bot]'
      uses: docker/login-action@v1.12.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Docker Image
      uses: docker/build-push-action@v2
      with:
        tags: |
          ${{env.DOCKER_IMAGE}}:${{env.IMAGE_TAG}}
          ${{env.DOCKER_IMAGE}}:${{env.BRANCH_TAG}}
        push: true
        cache-to: type=inline
        cache-from: |
          type=registry,ref=${{env.DOCKER_IMAGE}}:main
          type=registry,ref=${{env.DOCKER_IMAGE}}:${{env.IMAGE_TAG}}
          type=registry,ref=${{env.DOCKER_IMAGE}}:${{env.BRANCH_TAG}}
        build-args: COMMIT_SHA=${{ github.sha }}

    - name: Check for Failure
      if: ${{ failure() && github.ref == 'refs/heads/main' }}
      uses: rtCamp/action-slack-notify@master
      env:
        SLACK_CHANNEL: twd_publish_register_tech
        SLACK_COLOR: '#ef5343'
        SLACK_ICON_EMOJI: ':github-logo:'
        SLACK_USERNAME: Register Trainee Teachers
        SLACK_TITLE: Build Failure
        SLACK_MESSAGE: ':alert: Build failure on ${{ github.event.inputs.environment }} :sadparrot:'
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  test:
    name: Test
    needs: [build]
    outputs: 
      image_tag: ${{ needs.build.outputs.image_tag }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set environment variables
      run: |
        echo "IMAGE_TAG=${{ needs.build.outputs.image_tag }}" >> $GITHUB_ENV

    - name: Pull docker images
      run: docker pull ${{ needs.build.outputs.docker_image }}:$IMAGE_TAG

    - name: Bring images up
      run: |
        docker-compose up --no-build -d
        docker-compose exec -T web /bin/sh -c "./wait-for-command.sh -c 'nc -z db 5432' -s 0 -t 20"
        docker-compose exec -T web /bin/sh -c "yarn add jest"
        docker-compose exec -T web /bin/sh -c "RAILS_ENV=test bundle exec rails assets:precompile"

    - name: Install chromedriver
      run: docker-compose exec -T web /bin/sh -c 'apk add chromium chromium-chromedriver'

    - name: Setup DB
      run: docker-compose exec -T web /bin/sh -c "bundle exec rails db:setup"

    - name: Run Ruby Linter
      run: docker-compose exec -T web /bin/sh -c 'bundle exec rubocop app config db lib spec Gemfile --format clang'

    - name: Run JavaScript Linter
      run: docker-compose exec -T web /bin/sh -c 'bundle exec rake lint:javascript'

    - name: Run SCSS Linter
      run:  docker-compose exec -T web /bin/sh -c 'bundle exec rake lint:scss'

    - name: Run Rspec tests
      run: docker-compose exec --env COVERAGE=true -T web /bin/sh -c 'bundle exec rake spec'

    - name: Run Javascript tests
      run: docker-compose exec -T web /bin/sh -c 'yarn run test'

    - name: Check for Failure
      if: ${{ failure() && github.ref == 'refs/heads/main' }}
      uses: rtCamp/action-slack-notify@master
      env:
        SLACK_CHANNEL: twd_publish_register_tech
        SLACK_COLOR: '#ef5343'
        SLACK_ICON_EMOJI: ':github-logo:'
        SLACK_USERNAME: Register Trainee Teachers
        SLACK_TITLE: Build Failure
        SLACK_MESSAGE: ':alert: Build failure on ${{ github.event.inputs.environment }} :sadparrot:'
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  deploy_review:
    name: Deployment To Review
    concurrency: deploy_review_${{ github.event.pull_request.number }}
    if: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy') }}
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Deploy App to Review
      uses: ./.github/actions/deploy/
      with:
        actions-api-access-token: ${{ secrets.API_TOKEN_FOR_GITHUB_ACTION }}
        arm-access-key: ${{ secrets.ARM_ACCESS_KEY_REVIEW }}
        azure-credentials: ${{ secrets.AZURE_CREDENTIALS_REVIEW }}
        environment: review
        pr-number: ${{ github.event.pull_request.number }}
        sha: ${{ needs.build.outputs.image_tag }}
        slack-webhook: ${{ secrets.SLACK_WEBHOOK }}

  deploy_all:
    name: Deployment To All
    concurrency: deploy_all
    if: ${{ success() && github.ref == 'refs/heads/main' }}
    needs: [test]
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        environment: [qa,staging,production,sandbox,dttpimport]
      max-parallel: 1
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Deploy App to ${{ matrix.environment }}
      uses: ./.github/actions/deploy/
      with:
        actions-api-access-token: ${{ secrets.API_TOKEN_FOR_GITHUB_ACTION }}
        arm-access-key: ${{ secrets[format('ARM_ACCESS_KEY_{0}', matrix.environment)] }}
        azure-credentials: ${{ secrets[format('AZURE_CREDENTIALS_{0}', matrix.environment)] }}
        environment: ${{ matrix.environment }}
        sha: ${{ needs.test.outputs.image_tag }}
        slack-webhook: ${{ secrets.SLACK_WEBHOOK }}
