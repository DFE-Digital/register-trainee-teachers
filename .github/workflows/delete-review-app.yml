name: Delete Review App

on:
  pull_request:
    types: [closed]
    branches: [main]

permissions:
  deployments: write

jobs:
  delete-review-app:
    name: Delete Review App ${{ github.event.pull_request.number }}
    concurrency: deploy_review_${{ github.event.pull_request.number }}
    if: ${{ contains(github.event.pull_request.labels.*.name, 'deploy') || contains(github.event.pull_request.labels.*.name, 'dependencies') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Environment variables
        run: |
          terraform_version=$(awk '/{/{f=/^terraform/;next}f' terraform/aks/provider.tf | grep -o [0-9\.]*)
          PR_NUMBER=${{ github.event.pull_request.number }}
          TF_STATE_FILE=pr-$PR_NUMBER.tfstate
          echo "DEPLOY_ENV=review-$PR_NUMBER" >> $GITHUB_ENV
          echo "APP_NAME=pr-$PR_NUMBER" >> $GITHUB_ENV
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "TF_STATE_FILE=$TF_STATE_FILE" >> $GITHUB_ENV
          echo "TERRAFORM_VERSION=$terraform_version" >> $GITHUB_ENV

          pr_state_file=$(az storage blob list -c rtt-tfstate \
           --connection-string $AZURE_STORAGE_CONNECTION_STRING \
           --prefix $TF_STATE_FILE --query "[].name" -o tsv)

          if [ ! -z "$pr_state_file" ]; then echo "TF_STATE_EXISTS=true" >> $GITHUB_ENV; fi;

          tf_vars_file=terraform/aks/workspace-variables/review.tfvars.json
          echo "key_vault_name=$(jq -r '.key_vault_name' ${tf_vars_file})" >> $GITHUB_ENV
          echo "key_vault_app_secret_name=$(jq -r '.key_vault_app_secret_name' ${tf_vars_file})" >> $GITHUB_ENV
          echo "key_vault_infra_secret_name=$(jq -r '.key_vault_infra_secret_name' ${tf_vars_file})" >> $GITHUB_ENV
        env:
          AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING_REVIEW }}

      - name: Use Terraform ${{ env.TERRAFORM_VERSION }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - uses: DFE-Digital/github-actions/set-kubelogin-environment@master
        if: env.TF_STATE_EXISTS == 'true'
        with:
          azure-credentials: ${{ secrets.AZURE_CREDENTIALS_REVIEW }}

      - uses: azure/login@v2
        if: env.TF_STATE_EXISTS == 'true'
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_REVIEW }}

      - name: Validate Azure Key Vault secrets
        if: env.TF_STATE_EXISTS == 'true'
        uses: DFE-Digital/github-actions/validate-key-vault-secrets@master
        with:
          KEY_VAULT: ${{ env.key_vault_name }}
          SECRETS: |
            ${{ env.key_vault_app_secret_name }}
            ${{ env.key_vault_infra_secret_name }}

      - name: Terraform destroy
        if: env.TF_STATE_EXISTS == 'true'
        run: make review ci destroy
        env:
          TF_VAR_azure_credentials:     ${{ secrets.AZURE_CREDENTIALS_REVIEW }}

      - name: Delete tf state file
        if: env.TF_STATE_EXISTS == 'true'
        run: |
            az storage blob delete -c rtt-tfstate --name ${{ env.TF_STATE_FILE }} \
            --connection-string $AZURE_STORAGE_CONNECTION_STRING
        env:
          AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING_REVIEW }}

      - name: Update ${{ matrix.environment }} status
        id: deactivate-env
        if:   ${{ always() && env.TF_STATE_EXISTS == 'true' }}
        uses: bobheadxi/deployments@v1
        with:
          step:   deactivate-env
          token:  ${{ secrets.GITHUB_TOKEN }}
          env:    review-${{ env.PR_NUMBER }}

      - name: Delete review-${{ env.PR_NUMBER }} environment
        if:   always() && (steps.deactivate-env.outcome == 'success')
        uses: bobheadxi/deployments@v1
        with:
          step:   delete-env
          token:  ${{ secrets.API_TOKEN_FOR_GITHUB_ACTION }}
          env:    review-${{ env.PR_NUMBER }}
