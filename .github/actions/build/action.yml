name: build
description: Build

inputs:
  token:
    description: Github token to use
    required: true
  slack-webhook:
    description: Slack webhook to use
    required: true
  azure-client-id:
    description: Managed identity client ID
    required: true
  azure-subscription-id:
    description: Azure subscription ID
    required: true
  azure-tenant-id:
    description: Azure tenant ID
    required: true

runs:
  using: composite
  steps:
    - name: Set environment variables (push or schedule or workflow_dispatch)
      shell: bash
      if: github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
      run: |
        GIT_BRANCH=${GITHUB_REF##*/}
        echo "BRANCH_TAG=$GIT_BRANCH" >> $GITHUB_ENV # GIT_BRANCH will be main for refs/heads/main
        echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

    - name: Set environment variables (pull_request)
      shell: bash
      if: github.event_name == 'pull_request'
      run: |
        GIT_BRANCH=${GITHUB_HEAD_REF##*/}
        echo "BRANCH_TAG=$GIT_BRANCH" >> $GITHUB_ENV
        echo "IMAGE_TAG=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV

    - name: Set KV environment variables
      shell: bash
      run: |
        # tag build to the review env for vars and secrets
        tf_vars_file=terraform/aks/workspace-variables/review.tfvars.json
        echo "KEY_VAULT_NAME=$(jq -r '.key_vault_name' ${tf_vars_file})" >> $GITHUB_ENV
        echo "KEY_VAULT_INFRA_SECRET_NAME=$(jq -r '.key_vault_infra_secret_name' ${tf_vars_file})" >> $GITHUB_ENV

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ inputs.token }}

    - uses: azure/login@v2
      with:
        tenant-id: ${{ inputs.azure-tenant-id }}
        subscription-id: ${{ inputs.azure-subscription-id }}
        client-id: ${{ inputs.azure-client-id }}

    - uses: DFE-Digital/keyvault-yaml-secret@v1
      id: get-secret
      with:
        keyvault: ${{ env.KEY_VAULT_NAME }}
        secret: ${{ env.KEY_VAULT_INFRA_SECRET_NAME }}
        key: SNYK_TOKEN

    - name: Build Docker Image
      uses: docker/build-push-action@v6
      with:
        tags: |
          ${{env.DOCKER_IMAGE}}:${{env.IMAGE_TAG}}
          ${{env.DOCKER_IMAGE}}:${{env.BRANCH_TAG}}
        push: false
        load: true
        cache-to: type=inline
        cache-from: |
          type=registry,ref=${{env.DOCKER_IMAGE}}:main
          type=registry,ref=${{env.DOCKER_IMAGE}}:${{env.IMAGE_TAG}}
          type=registry,ref=${{env.DOCKER_IMAGE}}:${{env.BRANCH_TAG}}
        build-args: COMMIT_SHA=${{ github.sha }}

    - name: Push ${{ env.DOCKER_IMAGE }} images for review
      shell: bash
      if: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy') }}
      run: docker image push --all-tags ${{ env.DOCKER_IMAGE }}

    - name: Run Snyk to check Docker image for vulnerabilities
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ steps.get-secret.outputs.snyk_token }}
      with:
        image: ${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}
        args: --file=Dockerfile --severity-threshold=high --exclude-app-vulns

    - name: Push ${{ env.DOCKER_IMAGE }} images
      shell: bash
      if: ${{ success() && !contains(github.event.pull_request.labels.*.name, 'deploy') }}
      run: docker image push --all-tags ${{ env.DOCKER_IMAGE }}

    - name: Check for Failure
      uses: ./.github/actions/send-slack-notification/
      if: ${{ failure() && github.ref == 'refs/heads/main' }}
      with:
        slack-title: 'Build failure'
        slack-message: ':alert: Build failure on commit ${{env.IMAGE_TAG}} :sadparrot:'
        slack-webhook: ${{ inputs.slack-webhook }}
