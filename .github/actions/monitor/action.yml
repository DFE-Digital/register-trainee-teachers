name: Monitor postgres logical replication
description: Monitor Azure postgres wal logs
inputs:
  environment:
    description: Name of the app environment
    required: true
  app-name:
    description: Name of the k8s deployment
    required: true
  azure-credentials:
    description: 'A JSON string containing service principal credentials e.g. {"client_id": "x", "client_secret": "x", "subscription_id": "x", "tenant_id": "x"}'
    required: false
    default: ''
  azure-client-id:
    description: Azure service principal or managed identity client ID when using OIDC
    required: false
    default: ''
  azure-subscription-id:
    description: Azure service principal or managed identity subscription ID when using OIDC
    required: false
    default: ''
  azure-tenant-id:
    description: Azure service principal or managed identity tenant ID when using OIDC
    required: false
    default: ''
  slack-webhook:
    description: Name of the slack webhook
    required: true
  tf-vars-path:
    description: Path to the terraform config files
    required: false
    default: "terraform/application/config"

runs:
  using: composite
  steps:
    - name: Set Environment variables
      id: set_env_var
      shell: bash
      run: |
        source global_config/${{ inputs.environment }}.sh
        tf_vars_file=${{ inputs.tf-vars-path }}/${{ inputs.environment }}.tfvars.json
        echo "CLUSTER=$(jq -r '.cluster' ${tf_vars_file})" >> $GITHUB_ENV
        echo "NAMESPACE=$(jq -r '.namespace' ${tf_vars_file})" >> $GITHUB_ENV
        echo "WAL_THRESHOLD=$(jq -r '.wal_threshold' ${tf_vars_file})" >> $GITHUB_ENV

    - uses: azure/login@v2
      with:
        creds: ${{ inputs.azure-credentials }}
        client-id: ${{ inputs.azure-client-id }}
        tenant-id: ${{ inputs.azure-tenant-id }}
        subscription-id: ${{ inputs.azure-subscription-id }}

    - name: Setup postgres client
      uses: DFE-Digital/github-actions/install-postgres-client@master
      with:
        version: 17

    - name: Install kubectl
      uses: DFE-Digital/github-actions/set-kubectl@master

    - uses: DFE-Digital/github-actions/set-kubelogin-environment@master
      with:
        azure-credentials: ${{ inputs.azure-credentials }}
        azure-client-id: ${{ inputs.azure-client-id }}
        azure-tenant-id: ${{ inputs.azure-tenant-id }}
        azure-subscription-id: ${{ inputs.azure-subscription-id }}

    - name: Set up cluster environment variables
      shell: bash
      run: |
        case ${{ env.CLUSTER }} in
          test)
            echo "cluster_rg=s189t01-tsc-ts-rg" >> $GITHUB_ENV
            echo "cluster_name=s189t01-tsc-test-aks" >> $GITHUB_ENV
            ;;
          production)
            echo "cluster_rg=s189p01-tsc-pd-rg" >> $GITHUB_ENV
            echo "cluster_name=s189p01-tsc-production-aks" >> $GITHUB_ENV
            ;;
          *)
            echo "unknown cluster"
            ;;
        esac

    - name: K8 setup
      shell: bash
      run: |
        az aks get-credentials --overwrite-existing -g ${{ env.cluster_rg }} -n ${{ env.cluster_name }}
        kubelogin convert-kubeconfig -l $AAD_LOGIN_METHOD
        # install konduit
        curl -s https://raw.githubusercontent.com/DFE-Digital/teacher-services-cloud/main/scripts/konduit.sh -o ./konduit.sh
        chmod +x ./konduit.sh

    - name: Check wal log size
      shell: bash
      run: |
        REPLICATION_SLOT_COUNT=$(./konduit.sh -n ${{ env.NAMESPACE }} -t 300 -q -x ${{ inputs.app-name }} -- psql -qtAXc 'SELECT count(*)from pg_replication_slots;')
        if [[ ${REPLICATION_SLOT_COUNT} -gt 0 ]]; then
          WAL_USED=$(./konduit.sh -n ${{ env.NAMESPACE }} -t 300 -q -x ${{ inputs.app-name }} -- psql -qtAXc 'SELECT pg_wal_lsn_diff(pg_current_wal_lsn(), restart_lsn) from pg_replication_slots;')
          if [[ ${WAL_USED} =~ ^[0-9]+$ ]]; then
            echo "WAL_USED=${WAL_USED}"
            echo "WAL_THRESHOLD=${{ env.WAL_THRESHOLD }}"
            if [[ ${WAL_USED} -gt ${{ env.WAL_THRESHOLD }} ]]; then
              echo "Removing replication slot"
              ./konduit.sh -n ${{ env.NAMESPACE }} -t 300 -q -x -i bin/stop-replication.psql ${{ inputs.app-name }} -- psql
              echo "REMOVED_SLOT=true" >> $GITHUB_ENV
            else
              echo "WAL_USED below WAL_THRESHOLD"
            fi
          else
            echo "WAL_USED is not a number"
          fi
        else
          echo "No replication slot"
        fi

    - name: Notify Slack channel on job failure
      shell: bash
      if: ${{ env.REMOVED_SLOT != '' }}
      run: |
        echo "slot was removed"

    # - name: Notify Slack channel on job failure
    ##### we want to distinguish between job failure and disabling slot
    #   if: ${{ failure() && env.REMOVED_SLOT != '' }}
    #   uses: rtCamp/action-slack-notify@v2
    #   env:
    #     SLACK_USERNAME: DB Monitor
    #     SLACK_TITLE: Database ${{ inputs.db-server-name }} monitor failure
    #     SLACK_MESSAGE: ${{ inputs.app-name }} monitor wall job failed
    #     SLACK_WEBHOOK: ${{ inputs.slack-webhook }}
    #     SLACK_COLOR: failure
    #     SLACK_FOOTER: Sent from monitor job in monitor-db workflow
