name: deploy
description: deploys application

inputs:
  arm-access-key:
    required: true
  azure-credentials:
    required: true
  environment:
    description: Environment to deploy to
    required: true
  pr-number:
    description: PR number for the review app
    required: false
  sha:
    description: Commit sha to be deployed
    required: true
  slack-webhook:
    required: true

outputs:
  deploy-url:
    value: ${{ steps.set_env_var.outputs.deploy_url }}

runs:
  using: composite
  steps:
    - name: Set Environment variables
      id: set_env_var
      shell: bash
      run: |
        if [ -n "${{ inputs.pr-number }}" ]; then
          echo "APP_NAME=${{ inputs.pr-number }}" >> $GITHUB_ENV
          echo "::set-output name=deploy_url::https://register-pr-${{ inputs.pr-number }}.london.cloudapps.digital"
          DEPLOY_ENV=${{ inputs.environment }}-${{ inputs.pr-number }}
          echo "DEPLOY_REF=${{ github.head_ref }}" >> $GITHUB_ENV
        else
          DEPLOY_ENV=${{ inputs.environment }}
          echo "DEPLOY_REF=${{ github.ref }}" >> $GITHUB_ENV

          if [ ${{ inputs.environment }} == "production" ]; then
            echo "::set-output name=deploy_url::https://www.register-trainee-teachers.education.gov.uk"
          else
            echo "::set-output name=deploy_url::https://${{ inputs.environment }}.register-trainee-teachers.education.gov.uk"
          fi
        fi

        echo "DEPLOY_ENV=${DEPLOY_ENV}" >> $GITHUB_ENV

        tf_vars_file=terraform/workspace-variables/${{ inputs.environment }}.tfvars.json
        echo "key_vault_name=$(jq -r '.key_vault_name' ${tf_vars_file})" >> $GITHUB_ENV
        echo "key_vault_app_secret_name=$(jq -r '.key_vault_app_secret_name' ${tf_vars_file})" >> $GITHUB_ENV
        echo "key_vault_infra_secret_name=$(jq -r '.key_vault_infra_secret_name' ${tf_vars_file})" >> $GITHUB_ENV
        echo "paas_space_name=$(jq -r '.paas_space_name' ${tf_vars_file})" >> $GITHUB_ENV

    - uses: azure/login@v1
      with:
        creds: ${{ inputs.azure-credentials }}

    - name: Validate Key Vault Secrets
      uses: DFE-Digital/github-actions/validate-key-vault-secrets@master
      with:
        KEY_VAULT: ${{ env.key_vault_name }}
        SECRETS: |
          ${{ env.key_vault_app_secret_name }}
          ${{ env.key_vault_infra_secret_name }}

    - name: Pin Terraform version
      uses: hashicorp/setup-terraform@v1.2.1
      with:
        terraform_version: 0.13.5

    - name: Terraform init, Terraform Plan and Apply
      shell: bash
      run: make ${{ inputs.environment }} ci deploy
      env:
        ARM_ACCESS_KEY:           ${{ inputs.arm-access-key }}
        TF_VAR_azure_credentials: ${{ inputs.azure-credentials }}
        IMAGE_TAG:                ${{ inputs.sha }}
        CONFIRM_PRODUCTION:       yes

    - uses: DFE-Digital/keyvault-yaml-secret@v1
      if: startsWith(env.DEPLOY_ENV,'review') || env.DEPLOY_ENV == 'staging' || env.DEPLOY_ENV == 'dttpimport' || env.DEPLOY_ENV == 'production'
      id: get-secrets
      with:
        keyvault: ${{ env.key_vault_name }}
        secret: ${{ env.key_vault_infra_secret_name }}
        key: CF_USER,CF_PASSWORD

    - name: Setup cf cli
      if: startsWith(env.DEPLOY_ENV,'review') || env.DEPLOY_ENV == 'staging' || env.DEPLOY_ENV == 'dttpimport' || env.DEPLOY_ENV == 'production'
      uses: DFE-Digital/github-actions/setup-cf-cli@master
      with:
        CF_USERNAME:   ${{ steps.get-secrets.outputs.CF_USER }}
        CF_PASSWORD:   ${{ steps.get-secrets.outputs.CF_PASSWORD }}
        CF_SPACE_NAME: ${{ env.paas_space_name }}

    - name: Run data migrations
      shell: bash
      if: env.DEPLOY_ENV == 'staging' || env.DEPLOY_ENV == 'dttpimport' || env.DEPLOY_ENV == 'production'
      run: cf run-task "register-${DEPLOY_ENV}" --command "cd /app && bundle exec rails data:migrate" --wait

    - name: Generate example data
      shell: bash
      if: startsWith(env.DEPLOY_ENV,'review')
      run: cf run-task "register-pr-${{ inputs.pr-number }}" --command "cd /app && bundle exec rails db:seed example_data:generate" --wait

    - name: Run Smoke Tests for ${{ inputs.environment }}
      uses: ./.github/actions/smoke-test/
      with:
        environment: ${{ inputs.environment }}
        pr-number: ${{ inputs.pr-number }}
        slack-webhook: ${{ inputs.slack-webhook }}

    - name: Notify Slack channel on job failure
      if: ${{ failure() && github.ref == 'refs/heads/main' }}
      uses: rtCamp/action-slack-notify@master
      env:
        SLACK_CHANNEL: twd_publish_register_tech
        SLACK_COLOR: '#ef5343'
        SLACK_ICON_EMOJI: ':github-logo:'
        SLACK_USERNAME: Register Trainee Teachers
        SLACK_TITLE: Deployment failure on ${{ inputs.environment }}
        SLACK_MESSAGE: ':alert: Deployment of commit ${{ inputs.sha }} to ${{ inputs.environment }} failed :sadparrot:'
        SLACK_WEBHOOK: ${{ inputs.slack-webhook }}
