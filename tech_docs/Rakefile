# frozen_string_literal: true

require "fileutils"
require "yaml"
require "middleman-core"
require "kramdown"
require "open3"

namespace :tech_docs do
  desc "Build docs"
  task :build do
    # Build API docs
    #
    FileUtils.cp_r("source", "temp_source")

    FileUtils.rm("source/index.html.md")
    FileUtils.cp_r("source/api-docs/.", "source")
    FileUtils.rm_rf("source/api-docs")
    FileUtils.rm_rf("source/csv-docs")
    FileUtils.rm_rf("source/reference-data")

    system("bundle exec middleman build --build-dir ../public/api-docs")

    FileUtils.rm_rf("source")
    FileUtils.mv("temp_source", "source")

    # Build CSV docs
    #
    FileUtils.cp_r("source", "temp_source")

    FileUtils.rm("source/index.html.md")
    FileUtils.cp_r("source/csv-docs/.", "source")
    FileUtils.rm_rf("source/csv-docs")
    FileUtils.rm_rf("source/api-docs")
    FileUtils.rm_rf("source/reference-data")

    system("bundle exec middleman build --build-dir ../public/csv-docs")

    FileUtils.rm_rf("source")
    FileUtils.mv("temp_source", "source")

    # Build Reference Data docs
    #
    FileUtils.cp_r("source", "temp_source")

    FileUtils.rm("source/index.html.md")
    FileUtils.cp_r("source/reference-data/.", "source")
    FileUtils.rm_rf("source/api-docs")
    FileUtils.rm_rf("source/csv-docs")
    FileUtils.rm_rf("source/reference-data")

    system("bundle exec middleman build --build-dir ../public/reference-data")

    FileUtils.rm_rf("source")
    FileUtils.mv("temp_source", "source")

    # Generate search.json
    #
    system("bundle exec middleman build")

    FileUtils.cp("build/search.json", "../public/api-docs")
    FileUtils.cp("build/search.json", "../public/csv-docs")
    FileUtils.cp("build/search.json", "../public/reference-data")
  end

  namespace :csv do
    desc "Generate CSV fields docs based on fields.yaml"
    task :generate do
      app     = Middleman::Application.new
      context = Middleman::TemplateContext.new(app, {})

      FileUtils.mkdir_p("source/csv-docs/temp_fields")

      TechDocsHelpers.fields.each_with_index do |field, index|
        html = context.partial(
          "partials/csv_docs/field", locals: {
            csv_field_name: field["field_name"],
            column_number_in_csv_file: index,
            api_field_name: field["technical"],
            hesa_alignment: field["hesa_alignment"],
            description: Kramdown::Document.new(field["description"]).to_html,
            format: Kramdown::Document.new(field["format"]).to_html,
            example: Kramdown::Document.new(field["example"]).to_html,
            validation: Kramdown::Document.new(field["validation"]).to_html,
          }
        )

        File.open("source/csv-docs/temp_fields/#{field['technical'].gsub('_', '-')}.html.md", "w") do |f|
          f.write(
            <<~METADATA,
              ---
              title: #{field['field_name']}
              weight: #{index}
              source_url: https://github.com/DFE-Digital/register-trainee-teachers/blob/main/app/views/bulk_update/add_trainees/reference_docs/fields.yaml
              ---

            METADATA
          )
          f.write(html)
        end
      end

      FileUtils.cp("source/csv-docs/fields/index.html.md", "source/csv-docs/temp_fields")
      FileUtils.rm_rf("source/csv-docs/fields")
      FileUtils.mv("source/csv-docs/temp_fields", "source/csv-docs/fields")
    end
  end

  namespace :reference_data do
    desc "Generate reference data docs from the API"
    task :generate do
      runner_code   = "print Hesa::ReferenceData::V20250Rc.call.to_json"

      FileUtils.mkdir_p("source/reference-data/temp_v2025.0-rc")

      app     = Middleman::Application.new
      context = Middleman::TemplateContext.new(app, {})

      data_sorted = TechDocsHelpers.runner(runner_code).sort_by do |attribute, values|
        TechDocsHelpers.fields.detect { |field| field["technical"] == attribute }["field_name"]
      end.to_h

      data_sorted.each_with_index do |(attribute, values), index|
        field               = TechDocsHelpers.fields.detect { |field| field["technical"] == attribute }
        formatted_attribute = attribute.gsub("_", "-")

        File.open("source/reference-data/temp_v2025.0-rc/#{formatted_attribute}.html.md", "w") do |f|
          html = context.partial(
            "partials/reference_data/attribute", locals: {
              attribute: formatted_attribute,
              field: field,
              values: values,
            }
          )

          f.write(
            <<~METADATA,
              ---
              title: #{field["field_name"]}
              weight: #{index + 1}
              source_url: https://github.com/DFE-Digital/register-trainee-teachers/blob/main/app/lib/hesa/reference_data/v2025_0_rc.rb
              ---

            METADATA
          )


          f.write(html)
        end
      end

      FileUtils.cp("source/reference-data/v2025.0-rc/index.html.md.erb", "source/reference-data/temp_v2025.0-rc")
      FileUtils.rm_rf("source/reference-data/v2025.0-rc")
      FileUtils.mv("source/reference-data/temp_v2025.0-rc", "source/reference-data/v2025.0-rc")
    end
  end
end

module TechDocsHelpers
  RAILS_DIR     = File.expand_path("../", __dir__)
  RAILS_GEMFILE = File.join(RAILS_DIR, 'Gemfile')

  def self.runner(runner_code)
    command = <<~CMD
      cd #{RAILS_DIR} && BUNDLE_GEMFILE=#{RAILS_GEMFILE} bundle exec rails runner '#{runner_code}'
    CMD

    stdout, stderr, status = Open3.capture3(command)

    if status.success?
      JSON.parse(stdout)
    else
      raise StandardError, stderr.present? ? stderr : "Something went wrong"
    end
  end

  def self.fields
    @fields ||= YAML.load_file(
      File.expand_path("../app/views/bulk_update/add_trainees/reference_docs/fields.yaml", __dir__),
    )
  end
end
