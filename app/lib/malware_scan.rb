# frozen_string_literal: true

require "azure_blob"

class MalwareScan
  include ServicePattern

  SCAN_RESULT_TAG_KEY = /Malware Scanning scan result/
  SCAN_RESULT_TAG_VALUE_CLEAN = /No threats found/

  def initialize(upload:)
    @upload = upload
  end

  def call
    return unless upload.scan_result_pending?
    return if upload.file.blank?

    response = fetch_scan_result

    if response.is_a?(Net::HTTPSuccess)
      if response.body =~ SCAN_RESULT_TAG_KEY
        upload.update!(
          malware_scan_result: malware_scan_result_from_response(response),
        )
        if upload.scan_result_suspect?
          upload.destroy
        end
      end
    else
      upload.update!(malware_scan_result: "error")
    end
  rescue AzureBlob::Http::Error
    upload.update!(malware_scan_result: "error")
  end

private

  attr_reader :upload

  def blob_client
    @blob_client ||=
      AzureBlob::Client.new(
        account_name: Settings.azure.storage.temp_data_account,
        access_key: Settings.azure.storage.temp_data_access_key,
        container: Settings.azure.storage.temp_data_container,
      )
  end

  def fetch_scan_result
    blob_client.get_blob(upload.file.key)
  end

  def malware_scan_result_from_response(response)
    response.body =~ SCAN_RESULT_TAG_VALUE_CLEAN ? "clean" : "suspect"
  end
end
