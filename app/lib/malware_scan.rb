# frozen_string_literal: true

class MalwareScan
  include ServicePattern

  SCAN_RESULT_TAG_KEY = /Malware Scanning scan result/
  SCAN_RESULT_TAG_VALUE_CLEAN = /No threats found/

  def initialize(upload:)
    @upload = upload
  end

  def call
    return unless upload.scan_result_pending?
    return if upload.file.blank?

    response = fetch_scan_result

    if response.success?
      if response.body =~ SCAN_RESULT_TAG_KEY
        upload.update!(
          malware_scan_result: malware_scan_result_from_response(response),
        )
        if upload.scan_result_suspect?
          upload.destroy
        end
      end
    else
      upload.update!(malware_scan_result: "error")
    end
  rescue Azure::Core::Http::HTTPError
    upload.update!(malware_scan_result: "error")
  end

private

  attr_reader :upload

  def blob_service
    @blob_service ||=
      Azure::Storage::Blob::BlobService.new(
        storage_account_name: Settings.azure.storage.temp_data_account,
        storage_access_key: Settings.azure.storage.temp_data_access_key,
      )
  end

  def fetch_scan_result
    blob_service.call(:get, tags_for_blob_url)
  end

  def tags_for_blob_url
    @tags_for_blob_url ||=
      blob_service.generate_uri(
        File.join("tempdata", upload.file.key),
        { comp: "tags" },
      )
  end

  def malware_scan_result_from_response(response)
    response.body =~ SCAN_RESULT_TAG_VALUE_CLEAN ? "clean" : "suspect"
  end
end
