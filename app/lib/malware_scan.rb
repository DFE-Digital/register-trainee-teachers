# frozen_string_literal: true

require "azure_blob"

class MalwareScan
  include ServicePattern

  SCAN_RESULT_TAG_KEY = "Malware Scanning scan result"
  SCAN_RESULT_TAG_VALUE_CLEAN = "no threats found"
  SCAN_RESULT_TAG_VALUE_ERROR = /scan failed/

  def initialize(upload:)
    @upload = upload
  end

  def call
    return if upload.file.blank? || upload.scan_result_clean?

    case malware_tag
    when SCAN_RESULT_TAG_VALUE_CLEAN
      upload.scan_result_clean!
    when SCAN_RESULT_TAG_VALUE_ERROR
      upload.scan_result_error!
    else
      # there is no clear guidance for a scan result of "suspect"
      # so we'll treat any other content for the SCAN_RESULT_TAG_KEY as suspect
      upload.scan_result_suspect!
    end
  rescue AzureBlob::Http::Error, Net::HTTPClientError
    upload.scan_result_error!
  end

private

  attr_reader :upload

  def blob_client
    @blob_client ||=
      AzureBlob::Client.new(
        account_name: Settings.azure.storage.temp_data_account,
        access_key: Settings.azure.storage.temp_data_access_key,
        container: Settings.azure.storage.temp_data_container,
      )
  end

  def blob_tags
    @blob_tags ||= blob_client.get_blob_tags(upload.file.key)
  end

  def malware_tag
    @malware_tag ||= blob_tags&.dig(SCAN_RESULT_TAG_KEY)&.downcase
  end
end
